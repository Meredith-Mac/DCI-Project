setwd("C:/Users/mmacq/OneDrive/Documents/RStuff/SBDP/DCI-Project/DCI-Project/RawData")
library(dplyr)
library(lubridate)
life<-read.csv(file="Life-hist.csv", header=T, sep=",", na.strings= "") %>%
dplyr::select(Dolphin.ID,
Dolphin.Name,
Sex,
Mother.ID,
Haplotype,
Birth.Date,
Birth.Date.Accuracy,
Death.Date,
Death.Date.Accuracy)
Mom_life<-read.csv(file="Life-hist.csv", header=T, sep=",", na.strings= "") %>%
dplyr::select(Dolphin.ID,
Dolphin.Name,
Birth.Date,
Death.Date)
Mom_life$Birth.Date<-ymd(Mom_life$Birth.Date)
Mom_life$Death.Date<-ymd(Mom_life$Death.Date)
Mom<-Mom_life %>%
rename(Mom.ID = Dolphin.ID)%>%
rename(Mom.Name = Dolphin.Name)%>%
rename(MomBDay = Birth.Date)%>%
rename(MomDDay = Death.Date)
# start cleaning life history data to generate "matrilines"
Organize<-life %>%
filter(Mother.ID != "NA") %>%
arrange(Birth.Date)%>%
arrange(Mother.ID)
#add columns for "next calf info"
Matrilines<-Organize%>%
group_by(Mother.ID) %>%
mutate (NextCalfBDay = lead(Birth.Date)) %>%
group_by(Mother.ID) %>%
mutate (NextCalfBDayAccuracy = lead(Birth.Date.Accuracy)) %>%
group_by(Mother.ID) %>%
mutate(NextCalfName = lead(Dolphin.Name)) %>%
group_by(Mother.ID) %>%
mutate(NextCalfID = lead(Dolphin.ID))
Matrilines$Birth.Date<-ymd(Matrilines$Birth.Date)
Matrilines$Death.Date<-ymd(Matrilines$Death.Date)
Matrilines$NextCalfBDay<-ymd(Matrilines$NextCalfBDay)
Mat_join<- left_join(Matrilines, Mom, by = c("Mother.ID" = "Mom.ID"))
# add calf age at death, mom age at "first birth" in the interval, and time to "next birth"
# NOTE: some DBIs negative because next calf is born before other death date assigned
Mat_join<- mutate(Mat_join, CalfAgeDeath=as.numeric(Death.Date - Birth.Date, units="days"))
Mat_join<- mutate(Mat_join, MomAgeBirth=as.numeric(Birth.Date - MomBDay, units="days"))
Mat_join<- mutate(Mat_join, TimeToNextBirth=as.numeric(NextCalfBDay - Death.Date, units="days"))
#filtering for calves that died before age 3 and time to next birth is non-negative (some next calves born before other dies)
Mort<-Mat_join%>%
filter(is.na(TimeToNextBirth) | TimeToNextBirth > 0)%>%
filter(CalfAgeDeath < 1095.75)
#filtering for next calf BDay and DDay desired accuracies
MortAccurate<- Mort%>%
filter(Birth.Date.Accuracy != "YEAR ESTIMATE")%>%
filter(Death.Date.Accuracy != "YEAR ESTIMATE")%>%
filter(is.na(TimeToNextBirth) | NextCalfBDayAccuracy != "YEAR ESTIMATE")
#add season (y/n) for first calf birth ("in season" September through January consistent with Mann et al., 2000)
#testing "pre/early season loss
InSeason<-MortAccurate %>%
mutate(DeathMonth = month(Death.Date)) %>%
mutate(Season = ifelse(DeathMonth == 8 | DeathMonth == 9 | DeathMonth == 10, 1,0))
View(InSeason)
setwd("~/RStuff/SBDP/DCI-Project/Raw-Data")
library(dplyr)
library(lubridate)
# first, read in data. Convert observation dates into a format that R recognizes
survey<-read.csv(file="survey.csv", header=T, sep=",", na.strings= "") %>%
dplyr::select(Observation.ID,
Observation.Date,
Dolphin.ID,
Dolphin.ID.Certainty)
survey$Observation.Date<-ymd(survey$Observation.Date)
focal<-read.csv(file="focal.csv", header=T, sep=",", strip.white=T, na.strings= "") %>%
dplyr::select(Observation.ID,
Observation.Date,
Dolphin.ID,
Dolphin.ID.Certainty)
focal$Observation.Date<-ymd(focal$Observation.Date)
###combine surveys and focals into all sightings, remove all low certainty IDs
all_sightings<-bind_rows(focal, survey) %>%
filter(Dolphin.ID.Certainty != "LOW") %>%
group_by(Dolphin.ID) %>%
arrange(Dolphin.ID, Observation.Date)
#bring in mom info from mortality sample and join mom info to all sightings, correct date formats
momlist<-read.csv("mort_sample.csv") %>%
dplyr::select(Mother.ID,
Mom.Name,
MomBDay,
MomDDay)
momlist$MomBDay<-ymd(momlist$MomBDay)
momlist$MomDDay<-ymd(momlist$MomDDay)
#join all sightings for moms in the sample
sightmom<-left_join(all_sightings, momlist, by = c("Dolphin.ID" = "Mother.ID"))
#remove sightings of dolphins not in the mom list, hence no info joined for Mom.Name
momsightings<-sightmom %>%
filter(Mom.Name != "NA")
#bring in calf info
calflist<-read.csv("mort_sample.csv")%>%
dplyr::select(Mother.ID,
Dolphin.Name,
NextCalfName,
Death.Date,
NextCalfBDay)
# Here, write csv which is required to examine sighting gaps among the moms in the sample
write.csv(InSeason, "mort_sample.csv")
calflist$Death.Date<-ymd(calflist$Death.Date)
calflist$NextCalfBDay<-ymd(calflist$NextCalfBDay)
# join mom sighting info to all calves.. for females with multiple intervals, will duplicate all of her sighting history by number of intervals she has
df<-left_join(calflist, momsightings, by = c("Mother.ID" = "Dolphin.ID"))
#filter obs dates during interval between death date and next calf bday or obs if no next calf born yet
intervalsight<-df%>%
filter((Observation.Date > Death.Date) & ((Observation.Date < NextCalfBDay) | is.na(NextCalfBDay)))
#if no next calf born yet, tag obs where obs date is > four years than calf death date
Tag<-intervalsight%>%
mutate(CensoredFour=ifelse(is.na(NextCalfBDay) & (Observation.Date > (Death.Date+1461)), 1, 0))
#remove obs that are four years after a calf date and still no new calf born (still censored four years later) and post-covid years
Remove<-Tag%>%
filter(CensoredFour==0)%>%
filter(Observation.Date <= "2020-01-01")
#add number of obs of mom within each interval, calculate gaps
Gaps<-Remove%>%
group_by(Dolphin.Name)%>%
add_count(Mother.ID)%>%
rename(ObsCount = n)%>%
mutate(Gap=as.numeric(Observation.Date - lag(Observation.Date), units="days"))
#pull out max gap during each interval (so by calf rather than mom)
MaxGap<-Gaps%>%
group_by(Dolphin.Name)%>%
slice_max(Gap)%>%
mutate(dup = duplicated(Dolphin.Name)) %>%
filter(dup == FALSE)
Gaps.Less.Three<-MaxGap%>%
filter(Gap<=1095.75)%>%
filter(ObsCount>5)
Gap.Two<-MaxGap%>%
filter(Gap<=730)%>%
filter(ObsCount>5)
write.csv(Gap.Two, "interval-two.csv")
################################################################################################
############## PAUSE - go to "Sighting-gaps-moms.R" to generate list of females who make the cut
Intervals<- read.csv(file="interval-two.csv", header=T, sep=",", strip.white=T, na.strings= "") %>%
dplyr::select(Dolphin.Name,
Gap,
ObsCount)
# OLD- cross reference lists-- mom sample includes  females with sighting gap of no more than 3 years
# OLD- during her reproductive years (13+) and a minimum of 15 sightings
# OLD- DCI sample is 152 intervals from calf death to next birth (event) or censorship...
#177 intervals with new approach, 3 yr gap-- 108 moms (two year gap 173 intervals, 105 moms)
Sample<-InSeason %>%
filter(Dolphin.Name %in% Intervals$Dolphin.Name)
View(Sample)
# make CalfAgeDeath, TimeToNextBirth, and MomAgeAtFirstBirth years not days
TimeInYears<-Sample %>%
mutate(Present = today()) %>%
mutate(CalfAgeDeathYrs = CalfAgeDeath/365.25) %>%
mutate(TimeToNextBirth = TimeToNextBirth/365.25) %>%
mutate(MomAgeBirth = MomAgeBirth/365.25)
#create column for event/censored - after the "first calf" died, did she have another?
AddEventCensored<-TimeInYears %>%
mutate(EventCensored = ifelse(TimeToNextBirth>1, 1,0)) %>%
mutate(EventCensored = ifelse(is.na(TimeToNextBirth), 0,1)) %>%
mutate(MomDeadCensored = ifelse(EventCensored == 0 & !is.na(MomDDay) & is.na(TimeToNextBirth), 1,0)) %>%
mutate(MomAliveCensored = ifelse(EventCensored == 0 & is.na(MomDDay) & is.na(TimeToNextBirth), 1,0))
#create time to event column exclude case where calf outlived mom
#This sample excludes moms/kids who have the same assigned death date so TimeToEvent = 0
TimeToEvent<-AddEventCensored %>%
mutate(TimeToEvent = ifelse(EventCensored == 1, print(TimeToNextBirth), ifelse(MomDeadCensored == 1,
print((MomDDay-Death.Date)/365.25), ifelse(MomAliveCensored == 1, print((Present-Death.Date)/365.25),0))))
#create age categories
Categories<-TimeToEvent %>%
mutate(CalfAgeDeathCategories = ifelse(CalfAgeDeathYrs < 0.25, "a.Calf.under.3mo",
ifelse(CalfAgeDeathYrs < 1, "b.Calf.3mo.to.1y",
ifelse(CalfAgeDeathYrs < 2, "c.Calf.1y.to.2y", "d.Calf.2y.to.3y"))))
#create columns for age categories
CalfDeathCatsBinary<-Categories %>%
mutate(a.Calf.under.3mo = ifelse(CalfAgeDeathCategories == "a.Calf.under.3mo", 1, 0)) %>%
mutate(b.Calf.3mo.to.1y = ifelse(CalfAgeDeathCategories == "b.Calf.3mo.to.1y", 1, 0)) %>%
mutate(c.Calf.1y.to.2y = ifelse(CalfAgeDeathCategories == "c.Calf.1y.to.2y", 1, 0)) %>%
mutate(d.Calf.2y.to.3y = ifelse(CalfAgeDeathCategories == "d.Calf.2y.to.3y", 1, 0))
#### Not sure if we want to run this... probably, 2-3 range was messing up the model
#remove calves w/ age death >2yrs... 162 intervals
CalfDieBefore2<-CalfDeathCatsBinary %>%
filter(CalfAgeDeath < 730.5)
write.csv(CalfDieBefore2, "Final-sample.csv")
write.csv(CalfDieBefore2, "Final-sample.csv")
#### Not sure if we want to run this... probably, 2-3 range was messing up the model
#remove calves w/ age death >2yrs... 162 intervals
CalfDieBefore2<-CalfDeathCatsBinary %>%
filter(CalfAgeDeath < 730.5)
write.csv(CalfDieBefore2, "Final-sample.csv")
write.csv(CalfDieBefore2, "Final-sample.csv")
write.csv(CalfDieBefore2, "C:/Users/mmacq/OneDrive/Documents/RStuff/SBDP/DCI-Project/DCI-Project/RawData/Final-sample.csv")
setwd("C:/Users/mmacq/OneDrive/Documents/RStuff/SBDP/DCI-Project/DCI-Project/RawData")
library(survival)
library(survminer)
library(coxme)
library(ggplot2)
library(frailtySurv)
library(ggsurvfit)
#first, load in data
CalfDieBefore2<-read.csv("Final-sample.csv")
###Don't need to run, checks how many cases are event
Event<-CalfDieBefore2%>%
filter(EventCensored == "1")
#####################################################################################################
################################# *** !!! SELECTED MODEL !!! *** ###########################################################
Model<-coxme(Surv(TimeToEvent, EventCensored) ~ CalfAgeDeathCategories + MomAgeBirth + Season + (1 | Mother.ID), data = CalfDieBefore2)
print(Model)
